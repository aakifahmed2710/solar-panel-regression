# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17_IVXxZ2NzobRu1s0y68TBqxxuYnyaDO
"""
!pip install joblib

import streamlit as st
import pandas as pd
import joblib
from sklearn.preprocessing import StandardScaler

model = joblib.load('model.pkl')
scaler = joblib.load('scaler.pkl')

def predict_power(data):
    # Preprocessing and scaling should be done similarly to the training phase
    data_scaled = scaler.transform(data)  # Ensure you have saved or defined the scaler
    prediction = model.predict(data_scaled)
    return prediction

def main():
    st.title("Solar Power Generation Prediction")

    st.sidebar.header("Input Parameters")

    # Define a function to capture user inputs
    def user_input_features():
        distance_to_solar_noon = st.sidebar.slider('Distance to Solar Noon (radians)', 0.0, 1.57, 0.78)
        temperature = st.sidebar.slider('Temperature (°C)', -20.0, 50.0, 25.0)
        wind_direction = st.sidebar.slider('Wind Direction (°)', 0, 360, 180)
        wind_speed = st.sidebar.slider('Wind Speed (m/s)', 0.0, 20.0, 5.0)
        sky_cover = st.sidebar.slider('Sky Cover (0-4)', 0, 4, 2)
        visibility = st.sidebar.slider('Visibility (km)', 0.0, 20.0, 10.0)
        humidity = st.sidebar.slider('Humidity (%)', 0.0, 100.0, 50.0)
        average_wind_speed = st.sidebar.slider('Average Wind Speed (m/s)', 0.0, 20.0, 5.0)
        average_pressure = st.sidebar.slider('Average Pressure (mercury inches)', 25.0, 35.0, 30.0)

        data = {
            'distance_to_solar_noon': distance_to_solar_noon,
            'temperature': temperature,
            'wind_direction': wind_direction,
            'wind_speed': wind_speed,
            'sky_cover': sky_cover,
            'visibility': visibility,
            'humidity': humidity,
            'average_wind_speed': average_wind_speed,
            'average_pressure': average_pressure
        }
        features = pd.DataFrame(data, index=[0])
        return features

    input_df = user_input_features()

    st.subheader('Input Parameters')
    st.write(input_df)

    st.subheader('Predicted Solar Power Generation')

    if st.button('Predict'):
      prediction = predict_power(input_df)
      st.write(f"Predicted Power Generated: {prediction[0]:.2f} Joules")

if __name__ == '__main__':
    main()

